#include "device_driver/device_driver.h"

extern WORD Get_position[12][64];
extern WORD Get_velocity[12][64];
extern WORD Get_torque[12][64];

BYTE Rec_pos_lower_position[12][8]      = {
    {0x40,0x64,0x60,0x00,0x00,0x00,0x00,0x00},/* read_position */
    {0x40,0x64,0x60,0x00,0x00,0x00,0x00,0x00},
    {0x40,0x64,0x60,0x00,0x00,0x00,0x00,0x00},
    {0x40,0x64,0x60,0x00,0x00,0x00,0x00,0x00},

    {0x40,0x64,0x60,0x00,0x00,0x00,0x00,0x00},/* read_position */
    {0x40,0x64,0x60,0x00,0x00,0x00,0x00,0x00},
    {0x40,0x64,0x60,0x00,0x00,0x00,0x00,0x00},
    {0x40,0x64,0x60,0x00,0x00,0x00,0x00,0x00},

    {0x40,0x64,0x60,0x00,0x00,0x00,0x00,0x00},/* read_position */
    {0x40,0x64,0x60,0x00,0x00,0x00,0x00,0x00},
    {0x40,0x64,0x60,0x00,0x00,0x00,0x00,0x00},
    {0x40,0x64,0x60,0x00,0x00,0x00,0x00,0x00}
};
BYTE Rec_vel_lower_velocity[12][8]      = {
    {0x40,0xD3,0x30,0x00,0x00,0x00,0x00,0x01},/* read_position */
    {0x40,0xD3,0x30,0x00,0x00,0x00,0x00,0x01},
    {0x40,0xD3,0x30,0x00,0x00,0x00,0x00,0x01},
    {0x40,0xD3,0x30,0x00,0x00,0x00,0x00,0x01},

    {0x40,0xD3,0x30,0x00,0x00,0x00,0x00,0x01},/* read_position */
    {0x40,0xD3,0x30,0x00,0x00,0x00,0x00,0x01},
    {0x40,0xD3,0x30,0x00,0x00,0x00,0x00,0x01},
    {0x40,0xD3,0x30,0x00,0x00,0x00,0x00,0x01},

    {0x40,0xD3,0x30,0x00,0x00,0x00,0x00,0x01},/* read_position */
    {0x40,0xD3,0x30,0x00,0x00,0x00,0x00,0x01},
    {0x40,0xD3,0x30,0x00,0x00,0x00,0x00,0x01},
    {0x40,0xD3,0x30,0x00,0x00,0x00,0x00,0x01}
};
BYTE Rec_toq_lower_torque[12][8]      = {
    {0x40,0x77,0x60,0x00,0x00,0x00,0x00,0x00},/* read_position */
    {0x40,0x77,0x60,0x00,0x00,0x00,0x00,0x00},
    {0x40,0x77,0x60,0x00,0x00,0x00,0x00,0x00},
    {0x40,0x77,0x60,0x00,0x00,0x00,0x00,0x00},

    {0x40,0x77,0x60,0x00,0x00,0x00,0x00,0x00},/* read_position */
    {0x40,0x77,0x60,0x00,0x00,0x00,0x00,0x00},
    {0x40,0x77,0x60,0x00,0x00,0x00,0x00,0x00},
    {0x40,0x77,0x60,0x00,0x00,0x00,0x00,0x00},

    {0x40,0x77,0x60,0x00,0x00,0x00,0x00,0x00},/* read_position */
    {0x40,0x77,0x60,0x00,0x00,0x00,0x00,0x00},
    {0x40,0x77,0x60,0x00,0x00,0x00,0x00,0x00},
    {0x40,0x77,0x60,0x00,0x00,0x00,0x00,0x00}
};
BYTE TX_Active_Move[12][8] = {
    {0x00,0X01,0x00,0x00,0x00,0x00,0x00,0x00},/* ACTIVE */
    {0x00,0X01,0x00,0x00,0x00,0x00,0x00,0x00},
    {0x00,0X01,0x00,0x00,0x00,0x00,0x00,0x00},
    {0x00,0X01,0x00,0x00,0x00,0x00,0x00,0x00},

    {0x22,0x60,0x60,0x00,0x01,0x00,0x00,0x00},/* PPM */
    {0x22,0x60,0x60,0x00,0x01,0x00,0x00,0x00},
    {0x22,0x60,0x60,0x00,0x01,0x00,0x00,0x00},
    {0x22,0x60,0x60,0x00,0x01,0x00,0x00,0x00},

    {0x22,0x40,0x60,0x00,0x06,0x00,0x00,0x00},/* DIASBALE */
    {0x22,0x40,0x60,0x00,0x06,0x00,0x00,0x00},
    {0x22,0x40,0x60,0x00,0x06,0x00,0x00,0x00},
    {0x22,0x40,0x60,0x00,0x06,0x00,0x00,0x00}
};

BYTE TX_pos_upper_follow_[12][8] = {
    {0x22,0x40,0x60,0x00,0x0F,0x00,0x00,0x00},/* ENABLE */
    {0x22,0x40,0x60,0x00,0x0F,0x00,0x00,0x00},
    {0x22,0x40,0x60,0x00,0x0F,0x00,0x00,0x00},
    {0x22,0x40,0x60,0x00,0x0F,0x00,0x00,0x00},

    {0x22,0x7A,0x60,0x00,0x00,0x00,0x00,0x00},
    {0x22,0x7A,0x60,0x00,0x00,0x00,0x00,0x00},
    {0x22,0x7A,0x60,0x00,0x00,0x00,0x00,0x00},
    {0x22,0x7A,0x60,0x00,0x00,0x00,0x00,0x00},

    {0x22,0x40,0x60,0x00,0x3F,0x00,0x00,0x00},/* MOVE */
    {0x22,0x40,0x60,0x00,0x3F,0x00,0x00,0x00},
    {0x22,0x40,0x60,0x00,0x3F,0x00,0x00,0x00},
    {0x22,0x40,0x60,0x00,0x3F,0x00,0x00,0x00}
};
DWORD Move_lower_motorID[12]   = {0x605,0x607,0x606,0x608,0x605,0x607,0x606,0x608,0x605,0x607,0x606,0x608};

std::vector<double> motor_angle;
std::vector<double> motor_velocity;
std::vector<double> motor_torque;
std::vector<int> motor_qc;
ECI_RESULT hResult;

void init_hardware()
{
    motor_angle.resize(4);
    motor_velocity.resize(4);
    motor_torque.resize(4);
    motor_qc.resize(4);
    /* Motor Initialization */
    hResult = ECI_OK;
    hResult = EciDemo113();
    Can_Tx_Data( hResult, TX_Active_Move, Move_lower_motorID);
}

std::vector<double> read_position()
{
    Can_Rx_Position( hResult, Rec_pos_lower_position, Move_lower_motorID);
    int v;
    double angle[4];
    if(Get_position[0][0] == 0 && Get_position[1][0] == 0 && Get_position[2][0] == 0 && Get_position[3][0] == 0)
    {
            Can_Rx_Position( hResult, Rec_pos_lower_position, Move_lower_motorID);
    }
    for(size_t i = 0;i < 4;++i)
    {
            for(size_t j = 0;j < 4;++j)
            {
                v|=((unsigned int)Get_position[i][j]&0xFFu)<<(j*8);
            }
            angle[i] = 360 * v /1638400;
            v = 0;
            motor_angle[i] = angle[i];
    }
    return motor_angle;
}

std::vector<double> read_velocity()
{
    Can_Rx_Velocity( hResult, Rec_vel_lower_velocity, Move_lower_motorID);
    int v;
    double velocity[4];
    if(Get_velocity[0][0] == 0 && Get_velocity[1][0] == 0 && Get_velocity[2][0] == 0 && Get_velocity[3][0] == 0)
    {
            Can_Rx_Velocity( hResult, Rec_vel_lower_velocity, Move_lower_motorID);
    }
    for(size_t i = 0;i < 4;++i)
    {
            for(size_t j = 0;j < 4;++j)
            {
                v|=((unsigned int)Get_velocity[i][j]&0xFFu)<<(j*8);
            }
            velocity[i] = 360 * v /1638400;
            v = 0;
            motor_velocity[i] = velocity[i];
    }
    return motor_velocity;
}

std::vector<double> read_torque()
{
    Can_Rx_Torque( hResult, Rec_toq_lower_torque, Move_lower_motorID);
    int v;
    double torque[4];
    if(Get_torque[0][0] == 0 && Get_torque[1][0] == 0 && Get_torque[2][0] == 0 && Get_torque[3][0] == 0)
    {
            Can_Rx_Torque( hResult, Rec_toq_lower_torque, Move_lower_motorID);
    }
    for(size_t i = 0;i < 4;++i)
    {
            for(size_t j = 0;j < 4;++j)
            {
                v|=((unsigned int)Get_torque[i][j]&0xFFu)<<(j*8);
            }
            torque[i] = 360 * v /1638400;
            v = 0;
            motor_torque[i] = torque[i];
    }
    return motor_torque;
}

void write_position(std::vector<double> data)
{
    for (int i = 0; i < 4; i++)
    {
            // printf("command: %f\n", data[i]);
            motor_angle[i] = data[i];  //Left  Thigh
            motor_qc[i] = 1638400/360*motor_angle[i];
            TX_pos_upper_follow_[4][i+4] = ( -motor_qc[0]>>(8*i)&0xff);
            TX_pos_upper_follow_[5][i+4] = ( motor_qc[1]>>(8*i)&0xff);
            TX_pos_upper_follow_[6][i+4] = ( -motor_qc[2]>>(8*i)&0xff);
            TX_pos_upper_follow_[7][i+4] = ( motor_qc[3]>>(8*i)&0xff);
    }
    /* Motive Angle Position */
    Can_Tx_Data( hResult, TX_pos_upper_follow_, Move_lower_motorID);
    Can_Tx_Data( hResult, TX_pos_upper_follow_, Move_lower_motorID);
}